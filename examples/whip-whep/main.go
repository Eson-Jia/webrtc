// SPDX-License-Identifier: MIT

//go:build !js
// +build !js

// whip-whep demonstrates how to use the WHIP/WHEP specifications to exchange SPD descriptions
// and stream media to a WebRTC client in the browser or OBS.
package main

import (
	"fmt"
	ice "github.com/pion/ice/v4"
	"io"
	"net"
	"net/http"
	"strings"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/pion/interceptor"
	"github.com/pion/interceptor/pkg/intervalpli"
	webrtc "github.com/pion/webrtc/v4"
)

// nolint: gochecknoglobals
var (
	peerConnectionConfiguration = webrtc.Configuration{
		ICEServers: []webrtc.ICEServer{
			{
				URLs: []string{"stun:stun.l.google.com:19302"},
			},
		},
	}
)

var settingEngine *webrtc.SettingEngine
var api *webrtc.API

func init() {
	// Create a SettingEngine, this allows non-standard WebRTC behavior
	settingEngine = &webrtc.SettingEngine{}
	udp := true

	if udp {
		// Configure our SettingEngine to use our UDPMux. By default a PeerConnection has
		// no global state. The API+SettingEngine allows the user to share state between them.
		// In this case we are sharing our listening port across many.
		// Listen on UDP Port 8443, will be used for all WebRTC traffic
		mux, err := ice.NewMultiUDPMuxFromPort(8443, ice.UDPMuxFromPortWithNetworks(ice.NetworkTypeUDP4))
		if err != nil {
			panic(err)
		}
		fmt.Printf("Listening for WebRTC traffic at %d\n", 8443)
		settingEngine.SetICEUDPMux(mux)
	} else {
		tcpListener, err := net.ListenTCP("tcp", &net.TCPAddr{
			IP:   net.IP{0, 0, 0, 0},
			Port: 8443,
		})
		if err != nil {
			panic(err)
		}

		fmt.Printf("Listening for ICE TCP at %s\n", tcpListener.Addr())

		tcpMux := webrtc.NewICETCPMux(nil, tcpListener, 8)
		settingEngine.SetICETCPMux(tcpMux)
		settingEngine.SetNetworkTypes([]webrtc.NetworkType{
			webrtc.NetworkTypeTCP4,
		})
	}
}

func init() {
	var err error
	err, api = prepareEngine()
	if err != nil {
		panic(err)
	}
}

func prepareEngine() (error, *webrtc.API) {
	mediaEngine := &webrtc.MediaEngine{}

	// Setup the codecs you want to use.
	// We'll only use H264 but you can also define your own
	if err := mediaEngine.RegisterCodec(webrtc.RTPCodecParameters{
		RTPCodecCapability: webrtc.RTPCodecCapability{
			MimeType: webrtc.MimeTypeOpus, ClockRate: 48000, Channels: 2, SDPFmtpLine: "minptime=10;useinbandfec=1",
			RTCPFeedback: nil,
		},
		PayloadType: 111,
	}, webrtc.RTPCodecTypeAudio); err != nil {
		panic(err)
	}

	// Create a InterceptorRegistry. This is the user configurable RTP/RTCP Pipeline.
	// This provides NACKs, RTCP Reports and other features. If you use `webrtc.NewPeerConnection`
	// this is enabled by default. If you are manually managing You MUST create a InterceptorRegistry
	// for each PeerConnection.
	interceptorRegistry := &interceptor.Registry{}

	// Register a intervalpli factory
	// This interceptor sends a PLI every 3 seconds. A PLI causes a video keyframe to be generated by the sender.
	// This makes our video seekable and more error resilent, but at a cost of lower picture quality and higher bitrates
	// A real world application should process incoming RTCP packets from viewers and forward them to senders
	intervalPliFactory, err := intervalpli.NewReceiverInterceptor()
	if err != nil {
		panic(err)
	}
	interceptorRegistry.Add(intervalPliFactory)

	// Use the default set of Interceptors
	if err = webrtc.RegisterDefaultInterceptors(mediaEngine, interceptorRegistry); err != nil {
		panic(err)
	}

	// Create the API object with the MediaEngine
	api := webrtc.NewAPI(webrtc.WithMediaEngine(mediaEngine),
		webrtc.WithSettingEngine(*settingEngine),
		webrtc.WithInterceptorRegistry(interceptorRegistry))
	return err, api
}

var mapOfTracks = make(map[string]*webrtc.TrackLocalStaticRTP)

func MakeAndHoldVideoTrack(id string) *webrtc.TrackLocalStaticRTP {
	track, err := webrtc.NewTrackLocalStaticRTP(webrtc.RTPCodecCapability{
		MimeType: webrtc.MimeTypeOpus,
	}, "audio", "pion")
	if err != nil {
		panic(err)
	}
	mapOfTracks[id] = track
	return track
}

type Query struct {
	Room string `uri:"room" binding:"required"`
	User string `uri:"user" binding:"required"`
}

// nolint:gocognit
func main() {
	r := gin.Default()
	r.Static("/", ".")
	r.POST("/whep/:room/:user", whepHandler)
	r.POST("/whip/:room/:user", whipHandler)

	fmt.Println("Open http://localhost:8080 to access this demo")
	panic(r.Run("0.0.0.0:8080"))
}

func whipHandler(c *gin.Context) {
	var query Query
	if err := c.ShouldBind(&query); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	// Read the offer from HTTP Request
	offer, err := io.ReadAll(c.Request.Body)
	if err != nil {
		panic(err)
	}

	// Create a MediaEngine object to configure the supported codec
	err, api = prepareEngine()
	if err != nil {
		panic(err)
	}

	// Prepare the configuration

	// Create a new RTCPeerConnection
	peerConnection, err := api.NewPeerConnection(peerConnectionConfiguration)
	if err != nil {
		panic(err)
	}

	// Allow us to receive 1 video trac
	if _, err = peerConnection.AddTransceiverFromKind(webrtc.RTPCodecTypeAudio); err != nil {
		panic(err)
	}

	// Set a handler for when a new remote track starts, this handler saves buffers to disk as
	// an ivf file, since we could have multiple video tracks we provide a counter.
	// In your application this is where you would handle/process video
	peerConnection.OnTrack(func(track *webrtc.TrackRemote, receiver *webrtc.RTPReceiver) { //nolint: revive
		for {
			pkt, _, err := track.ReadRTP()
			if err != nil {
				panic(err)
			}

			if _, ok := mapOfTracks[query.id]; !ok {
				MakeAndHoldVideoTrack(id)
			}
			if err = mapOfTracks[id].WriteRTP(pkt); err != nil {
				panic(err)
			}
		}
	})

	// Send answer via HTTP Response
	writeAnswer(c, peerConnection, offer, "/whip")
}

func whepHandler(c *gin.Context) {
	// Read the offer from HTTP Request
	id := strings.TrimPrefix(c.Request.URL.Path, "/whep/")
	id = strings.TrimSuffix(id, "/")
	offer, err := io.ReadAll(c.Request.Body)
	if err != nil {
		panic(err)
	}

	// Create a new RTCPeerConnection
	peerConnection, err := api.NewPeerConnection(peerConnectionConfiguration)
	if err != nil {
		panic(err)
	}

	// Add Video Track that is being written to from WHIP Session
	for i := 0; i < 10 && mapOfTracks[id] == nil; i++ {
		time.Sleep(1 * time.Second)
	}
	if mapOfTracks[id] == nil {
		c.Status(http.StatusNotFound)
		return
	}
	rtpSender, err := peerConnection.AddTrack(mapOfTracks[id])
	if err != nil {
		panic(err)
	}

	// Read incoming RTCP packets
	// Before these packets are returned they are processed by interceptors. For things
	// like NACK this needs to be called.
	go func() {
		rtcpBuf := make([]byte, 1500)
		for {
			if _, _, rtcpErr := rtpSender.Read(rtcpBuf); rtcpErr != nil {
				return
			}
		}
	}()

	// Send answer via HTTP Response
	writeAnswer(c, peerConnection, offer, "/whep")
}

func writeAnswer(c *gin.Context, peerConnection *webrtc.PeerConnection, offer []byte, path string) {
	// Set the handler for ICE connection state
	// This will notify you when the peer has connected/disconnected
	peerConnection.OnICEConnectionStateChange(func(connectionState webrtc.ICEConnectionState) {
		fmt.Printf("ICE Connection State has changed: %s\n", connectionState.String())

		if connectionState == webrtc.ICEConnectionStateFailed {
			_ = peerConnection.Close()
		}
	})

	if err := peerConnection.SetRemoteDescription(webrtc.SessionDescription{
		Type: webrtc.SDPTypeOffer, SDP: string(offer),
	}); err != nil {
		panic(err)
	}

	// Create channel that is blocked until ICE Gathering is complete
	gatherComplete := webrtc.GatheringCompletePromise(peerConnection)

	// Create answer
	answer, err := peerConnection.CreateAnswer(nil)
	if err != nil {
		panic(err)
	} else if err = peerConnection.SetLocalDescription(answer); err != nil {
		panic(err)
	}

	// Block until ICE Gathering is complete, disabling trickle ICE
	// we do this because we only can exchange one signaling message
	// in a production application you should exchange ICE Candidates via OnICECandidate
	<-gatherComplete

	// WHIP+WHEP expects a Location header and a HTTP Status Code of 201
	c.Header("Location", path)
	c.Status(http.StatusCreated)

	// Write Answer with Candidates as HTTP Response
	c.String(http.StatusCreated, peerConnection.LocalDescription().SDP)
}
